// source: event_stream.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.gateway.api.event.v1.AddFriendRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.AddFriendResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.AddStatCode', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.BeatHeartRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.BeatHeartResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.BeatHeartResponse.Flag', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.Code', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.ConfirmFriendRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.ConfirmFriendResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.DeleteFriendRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.DeleteFriendResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamRequest.EventCase', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamResponse.EventCase', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.ListFriendRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.ListFriendResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.ListUserInfoRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.ListUserInfoResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.Message', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.Message.DetailCase', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.Message.Emoji', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.Message.Image', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.Message.Plain', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OfflineRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OfflineResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OnlineRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OnlineResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.SingleMessageRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.SingleMessageResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.EventStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_);
};
goog.inherits(proto.gateway.api.event.v1.EventStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.EventStreamRequest.displayName = 'proto.gateway.api.event.v1.EventStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.EventStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_);
};
goog.inherits(proto.gateway.api.event.v1.EventStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.EventStreamResponse.displayName = 'proto.gateway.api.event.v1.EventStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OnlineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OnlineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OnlineRequest.displayName = 'proto.gateway.api.event.v1.OnlineRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.BeatHeartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.BeatHeartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.BeatHeartRequest.displayName = 'proto.gateway.api.event.v1.BeatHeartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OfflineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OfflineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OfflineRequest.displayName = 'proto.gateway.api.event.v1.OfflineRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.AddFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.AddFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.AddFriendRequest.displayName = 'proto.gateway.api.event.v1.AddFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.ConfirmFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.ConfirmFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.ConfirmFriendRequest.displayName = 'proto.gateway.api.event.v1.ConfirmFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.displayName = 'proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.ListFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.ListFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.ListFriendRequest.displayName = 'proto.gateway.api.event.v1.ListFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.DeleteFriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.DeleteFriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.DeleteFriendRequest.displayName = 'proto.gateway.api.event.v1.DeleteFriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.SingleMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.api.event.v1.SingleMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.gateway.api.event.v1.SingleMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.SingleMessageRequest.displayName = 'proto.gateway.api.event.v1.SingleMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.ListUserInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.api.event.v1.ListUserInfoRequest.repeatedFields_, null);
};
goog.inherits(proto.gateway.api.event.v1.ListUserInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.ListUserInfoRequest.displayName = 'proto.gateway.api.event.v1.ListUserInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OnlineResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OnlineResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OnlineResponse.displayName = 'proto.gateway.api.event.v1.OnlineResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.BeatHeartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.BeatHeartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.BeatHeartResponse.displayName = 'proto.gateway.api.event.v1.BeatHeartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OfflineResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OfflineResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OfflineResponse.displayName = 'proto.gateway.api.event.v1.OfflineResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.SingleMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.SingleMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.SingleMessageResponse.displayName = 'proto.gateway.api.event.v1.SingleMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.AddFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.AddFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.AddFriendResponse.displayName = 'proto.gateway.api.event.v1.AddFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.ConfirmFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.ConfirmFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.ConfirmFriendResponse.displayName = 'proto.gateway.api.event.v1.ConfirmFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.displayName = 'proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.ListFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.api.event.v1.ListFriendResponse.repeatedFields_, null);
};
goog.inherits(proto.gateway.api.event.v1.ListFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.ListFriendResponse.displayName = 'proto.gateway.api.event.v1.ListFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.DeleteFriendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.DeleteFriendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.DeleteFriendResponse.displayName = 'proto.gateway.api.event.v1.DeleteFriendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.ListUserInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.api.event.v1.ListUserInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.gateway.api.event.v1.ListUserInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.ListUserInfoResponse.displayName = 'proto.gateway.api.event.v1.ListUserInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.displayName = 'proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gateway.api.event.v1.Message.oneofGroups_);
};
goog.inherits(proto.gateway.api.event.v1.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.Message.displayName = 'proto.gateway.api.event.v1.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.Message.Plain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.Message.Plain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.Message.Plain.displayName = 'proto.gateway.api.event.v1.Message.Plain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.Message.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.Message.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.Message.Image.displayName = 'proto.gateway.api.event.v1.Message.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.Message.Emoji = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.Message.Emoji, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.Message.Emoji.displayName = 'proto.gateway.api.event.v1.Message.Emoji';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.gateway.api.event.v1.EventStreamRequest.EventCase = {
  EVENT_NOT_SET: 0,
  ONLINEREQUEST: 2,
  BEATHEARTREQUEST: 3,
  OFFLINEREQUEST: 4,
  ADDFRIENDREQUEST: 5,
  CONFIRMFRIENDREQUEST: 6,
  NOTIFYRECEIVEADDFRIENDREQUEST: 7,
  LISTFRIENDREQUEST: 8,
  DELETEFRIENDREQUEST: 9,
  SINGLEMESSAGEREQUEST: 10,
  LISTUSERINFOREQUEST: 11
};

/**
 * @return {proto.gateway.api.event.v1.EventStreamRequest.EventCase}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getEventCase = function() {
  return /** @type {proto.gateway.api.event.v1.EventStreamRequest.EventCase} */(jspb.Message.computeOneofCase(this, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.EventStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.EventStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    onlinerequest: (f = msg.getOnlinerequest()) && proto.gateway.api.event.v1.OnlineRequest.toObject(includeInstance, f),
    beatheartrequest: (f = msg.getBeatheartrequest()) && proto.gateway.api.event.v1.BeatHeartRequest.toObject(includeInstance, f),
    offlinerequest: (f = msg.getOfflinerequest()) && proto.gateway.api.event.v1.OfflineRequest.toObject(includeInstance, f),
    addfriendrequest: (f = msg.getAddfriendrequest()) && proto.gateway.api.event.v1.AddFriendRequest.toObject(includeInstance, f),
    confirmfriendrequest: (f = msg.getConfirmfriendrequest()) && proto.gateway.api.event.v1.ConfirmFriendRequest.toObject(includeInstance, f),
    notifyreceiveaddfriendrequest: (f = msg.getNotifyreceiveaddfriendrequest()) && proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.toObject(includeInstance, f),
    listfriendrequest: (f = msg.getListfriendrequest()) && proto.gateway.api.event.v1.ListFriendRequest.toObject(includeInstance, f),
    deletefriendrequest: (f = msg.getDeletefriendrequest()) && proto.gateway.api.event.v1.DeleteFriendRequest.toObject(includeInstance, f),
    singlemessagerequest: (f = msg.getSinglemessagerequest()) && proto.gateway.api.event.v1.SingleMessageRequest.toObject(includeInstance, f),
    listuserinforequest: (f = msg.getListuserinforequest()) && proto.gateway.api.event.v1.ListUserInfoRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.EventStreamRequest;
  return proto.gateway.api.event.v1.EventStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.EventStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.gateway.api.event.v1.OnlineRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.OnlineRequest.deserializeBinaryFromReader);
      msg.setOnlinerequest(value);
      break;
    case 3:
      var value = new proto.gateway.api.event.v1.BeatHeartRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinaryFromReader);
      msg.setBeatheartrequest(value);
      break;
    case 4:
      var value = new proto.gateway.api.event.v1.OfflineRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.OfflineRequest.deserializeBinaryFromReader);
      msg.setOfflinerequest(value);
      break;
    case 5:
      var value = new proto.gateway.api.event.v1.AddFriendRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.AddFriendRequest.deserializeBinaryFromReader);
      msg.setAddfriendrequest(value);
      break;
    case 6:
      var value = new proto.gateway.api.event.v1.ConfirmFriendRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.ConfirmFriendRequest.deserializeBinaryFromReader);
      msg.setConfirmfriendrequest(value);
      break;
    case 7:
      var value = new proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.deserializeBinaryFromReader);
      msg.setNotifyreceiveaddfriendrequest(value);
      break;
    case 8:
      var value = new proto.gateway.api.event.v1.ListFriendRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.ListFriendRequest.deserializeBinaryFromReader);
      msg.setListfriendrequest(value);
      break;
    case 9:
      var value = new proto.gateway.api.event.v1.DeleteFriendRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.DeleteFriendRequest.deserializeBinaryFromReader);
      msg.setDeletefriendrequest(value);
      break;
    case 10:
      var value = new proto.gateway.api.event.v1.SingleMessageRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.SingleMessageRequest.deserializeBinaryFromReader);
      msg.setSinglemessagerequest(value);
      break;
    case 11:
      var value = new proto.gateway.api.event.v1.ListUserInfoRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.ListUserInfoRequest.deserializeBinaryFromReader);
      msg.setListuserinforequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.EventStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.EventStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnlinerequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gateway.api.event.v1.OnlineRequest.serializeBinaryToWriter
    );
  }
  f = message.getBeatheartrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gateway.api.event.v1.BeatHeartRequest.serializeBinaryToWriter
    );
  }
  f = message.getOfflinerequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gateway.api.event.v1.OfflineRequest.serializeBinaryToWriter
    );
  }
  f = message.getAddfriendrequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gateway.api.event.v1.AddFriendRequest.serializeBinaryToWriter
    );
  }
  f = message.getConfirmfriendrequest();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gateway.api.event.v1.ConfirmFriendRequest.serializeBinaryToWriter
    );
  }
  f = message.getNotifyreceiveaddfriendrequest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.serializeBinaryToWriter
    );
  }
  f = message.getListfriendrequest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.gateway.api.event.v1.ListFriendRequest.serializeBinaryToWriter
    );
  }
  f = message.getDeletefriendrequest();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.gateway.api.event.v1.DeleteFriendRequest.serializeBinaryToWriter
    );
  }
  f = message.getSinglemessagerequest();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.gateway.api.event.v1.SingleMessageRequest.serializeBinaryToWriter
    );
  }
  f = message.getListuserinforequest();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.gateway.api.event.v1.ListUserInfoRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OnlineRequest onlineRequest = 2;
 * @return {?proto.gateway.api.event.v1.OnlineRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getOnlinerequest = function() {
  return /** @type{?proto.gateway.api.event.v1.OnlineRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OnlineRequest, 2));
};


/**
 * @param {?proto.gateway.api.event.v1.OnlineRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setOnlinerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearOnlinerequest = function() {
  return this.setOnlinerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasOnlinerequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BeatHeartRequest beatHeartRequest = 3;
 * @return {?proto.gateway.api.event.v1.BeatHeartRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getBeatheartrequest = function() {
  return /** @type{?proto.gateway.api.event.v1.BeatHeartRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.BeatHeartRequest, 3));
};


/**
 * @param {?proto.gateway.api.event.v1.BeatHeartRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setBeatheartrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearBeatheartrequest = function() {
  return this.setBeatheartrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasBeatheartrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OfflineRequest offlineRequest = 4;
 * @return {?proto.gateway.api.event.v1.OfflineRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getOfflinerequest = function() {
  return /** @type{?proto.gateway.api.event.v1.OfflineRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OfflineRequest, 4));
};


/**
 * @param {?proto.gateway.api.event.v1.OfflineRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setOfflinerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearOfflinerequest = function() {
  return this.setOfflinerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasOfflinerequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AddFriendRequest addFriendRequest = 5;
 * @return {?proto.gateway.api.event.v1.AddFriendRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getAddfriendrequest = function() {
  return /** @type{?proto.gateway.api.event.v1.AddFriendRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.AddFriendRequest, 5));
};


/**
 * @param {?proto.gateway.api.event.v1.AddFriendRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setAddfriendrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearAddfriendrequest = function() {
  return this.setAddfriendrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasAddfriendrequest = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ConfirmFriendRequest confirmFriendRequest = 6;
 * @return {?proto.gateway.api.event.v1.ConfirmFriendRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getConfirmfriendrequest = function() {
  return /** @type{?proto.gateway.api.event.v1.ConfirmFriendRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.ConfirmFriendRequest, 6));
};


/**
 * @param {?proto.gateway.api.event.v1.ConfirmFriendRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setConfirmfriendrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearConfirmfriendrequest = function() {
  return this.setConfirmfriendrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasConfirmfriendrequest = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional NotifyReceiveAddFriendRequest notifyReceiveAddFriendRequest = 7;
 * @return {?proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getNotifyreceiveaddfriendrequest = function() {
  return /** @type{?proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest, 7));
};


/**
 * @param {?proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setNotifyreceiveaddfriendrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearNotifyreceiveaddfriendrequest = function() {
  return this.setNotifyreceiveaddfriendrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasNotifyreceiveaddfriendrequest = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ListFriendRequest listFriendRequest = 8;
 * @return {?proto.gateway.api.event.v1.ListFriendRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getListfriendrequest = function() {
  return /** @type{?proto.gateway.api.event.v1.ListFriendRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.ListFriendRequest, 8));
};


/**
 * @param {?proto.gateway.api.event.v1.ListFriendRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setListfriendrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearListfriendrequest = function() {
  return this.setListfriendrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasListfriendrequest = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DeleteFriendRequest deleteFriendRequest = 9;
 * @return {?proto.gateway.api.event.v1.DeleteFriendRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getDeletefriendrequest = function() {
  return /** @type{?proto.gateway.api.event.v1.DeleteFriendRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.DeleteFriendRequest, 9));
};


/**
 * @param {?proto.gateway.api.event.v1.DeleteFriendRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setDeletefriendrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearDeletefriendrequest = function() {
  return this.setDeletefriendrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasDeletefriendrequest = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SingleMessageRequest singleMessageRequest = 10;
 * @return {?proto.gateway.api.event.v1.SingleMessageRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getSinglemessagerequest = function() {
  return /** @type{?proto.gateway.api.event.v1.SingleMessageRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.SingleMessageRequest, 10));
};


/**
 * @param {?proto.gateway.api.event.v1.SingleMessageRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setSinglemessagerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearSinglemessagerequest = function() {
  return this.setSinglemessagerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasSinglemessagerequest = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ListUserInfoRequest listUserInfoRequest = 11;
 * @return {?proto.gateway.api.event.v1.ListUserInfoRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getListuserinforequest = function() {
  return /** @type{?proto.gateway.api.event.v1.ListUserInfoRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.ListUserInfoRequest, 11));
};


/**
 * @param {?proto.gateway.api.event.v1.ListUserInfoRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setListuserinforequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearListuserinforequest = function() {
  return this.setListuserinforequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasListuserinforequest = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_ = [[4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.gateway.api.event.v1.EventStreamResponse.EventCase = {
  EVENT_NOT_SET: 0,
  ONLINERESPONSE: 4,
  BEATHEARTRESPONSE: 5,
  OFFLINERESPONSE: 6,
  ADDFRIENDRESPONSE: 7,
  CONFIRMFRIENDRESPONSE: 8,
  NOTIFYRECEIVEADDFRIENDRESPONSE: 9,
  LISTFRIENDRESPONSE: 10,
  DELETEFRIENDRESPONSE: 11,
  SINGLEMESSAGERESPONSE: 12,
  LISTUSERINFORESPONSE: 13
};

/**
 * @return {proto.gateway.api.event.v1.EventStreamResponse.EventCase}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getEventCase = function() {
  return /** @type {proto.gateway.api.event.v1.EventStreamResponse.EventCase} */(jspb.Message.computeOneofCase(this, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.EventStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.EventStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    messages: jspb.Message.getFieldWithDefault(msg, 3, ""),
    onlineresponse: (f = msg.getOnlineresponse()) && proto.gateway.api.event.v1.OnlineResponse.toObject(includeInstance, f),
    beatheartresponse: (f = msg.getBeatheartresponse()) && proto.gateway.api.event.v1.BeatHeartResponse.toObject(includeInstance, f),
    offlineresponse: (f = msg.getOfflineresponse()) && proto.gateway.api.event.v1.OfflineResponse.toObject(includeInstance, f),
    addfriendresponse: (f = msg.getAddfriendresponse()) && proto.gateway.api.event.v1.AddFriendResponse.toObject(includeInstance, f),
    confirmfriendresponse: (f = msg.getConfirmfriendresponse()) && proto.gateway.api.event.v1.ConfirmFriendResponse.toObject(includeInstance, f),
    notifyreceiveaddfriendresponse: (f = msg.getNotifyreceiveaddfriendresponse()) && proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.toObject(includeInstance, f),
    listfriendresponse: (f = msg.getListfriendresponse()) && proto.gateway.api.event.v1.ListFriendResponse.toObject(includeInstance, f),
    deletefriendresponse: (f = msg.getDeletefriendresponse()) && proto.gateway.api.event.v1.DeleteFriendResponse.toObject(includeInstance, f),
    singlemessageresponse: (f = msg.getSinglemessageresponse()) && proto.gateway.api.event.v1.SingleMessageResponse.toObject(includeInstance, f),
    listuserinforesponse: (f = msg.getListuserinforesponse()) && proto.gateway.api.event.v1.ListUserInfoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.EventStreamResponse;
  return proto.gateway.api.event.v1.EventStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.EventStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {!proto.gateway.api.event.v1.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessages(value);
      break;
    case 4:
      var value = new proto.gateway.api.event.v1.OnlineResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.OnlineResponse.deserializeBinaryFromReader);
      msg.setOnlineresponse(value);
      break;
    case 5:
      var value = new proto.gateway.api.event.v1.BeatHeartResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinaryFromReader);
      msg.setBeatheartresponse(value);
      break;
    case 6:
      var value = new proto.gateway.api.event.v1.OfflineResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.OfflineResponse.deserializeBinaryFromReader);
      msg.setOfflineresponse(value);
      break;
    case 7:
      var value = new proto.gateway.api.event.v1.AddFriendResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.AddFriendResponse.deserializeBinaryFromReader);
      msg.setAddfriendresponse(value);
      break;
    case 8:
      var value = new proto.gateway.api.event.v1.ConfirmFriendResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.ConfirmFriendResponse.deserializeBinaryFromReader);
      msg.setConfirmfriendresponse(value);
      break;
    case 9:
      var value = new proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.deserializeBinaryFromReader);
      msg.setNotifyreceiveaddfriendresponse(value);
      break;
    case 10:
      var value = new proto.gateway.api.event.v1.ListFriendResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.ListFriendResponse.deserializeBinaryFromReader);
      msg.setListfriendresponse(value);
      break;
    case 11:
      var value = new proto.gateway.api.event.v1.DeleteFriendResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.DeleteFriendResponse.deserializeBinaryFromReader);
      msg.setDeletefriendresponse(value);
      break;
    case 12:
      var value = new proto.gateway.api.event.v1.SingleMessageResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.SingleMessageResponse.deserializeBinaryFromReader);
      msg.setSinglemessageresponse(value);
      break;
    case 13:
      var value = new proto.gateway.api.event.v1.ListUserInfoResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.ListUserInfoResponse.deserializeBinaryFromReader);
      msg.setListuserinforesponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.EventStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.EventStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessages();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOnlineresponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gateway.api.event.v1.OnlineResponse.serializeBinaryToWriter
    );
  }
  f = message.getBeatheartresponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gateway.api.event.v1.BeatHeartResponse.serializeBinaryToWriter
    );
  }
  f = message.getOfflineresponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gateway.api.event.v1.OfflineResponse.serializeBinaryToWriter
    );
  }
  f = message.getAddfriendresponse();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.gateway.api.event.v1.AddFriendResponse.serializeBinaryToWriter
    );
  }
  f = message.getConfirmfriendresponse();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.gateway.api.event.v1.ConfirmFriendResponse.serializeBinaryToWriter
    );
  }
  f = message.getNotifyreceiveaddfriendresponse();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.serializeBinaryToWriter
    );
  }
  f = message.getListfriendresponse();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.gateway.api.event.v1.ListFriendResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeletefriendresponse();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.gateway.api.event.v1.DeleteFriendResponse.serializeBinaryToWriter
    );
  }
  f = message.getSinglemessageresponse();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.gateway.api.event.v1.SingleMessageResponse.serializeBinaryToWriter
    );
  }
  f = message.getListuserinforesponse();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.gateway.api.event.v1.ListUserInfoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Code code = 2;
 * @return {!proto.gateway.api.event.v1.Code}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getCode = function() {
  return /** @type {!proto.gateway.api.event.v1.Code} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gateway.api.event.v1.Code} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string messages = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getMessages = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.setMessages = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional OnlineResponse onlineResponse = 4;
 * @return {?proto.gateway.api.event.v1.OnlineResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getOnlineresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.OnlineResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OnlineResponse, 4));
};


/**
 * @param {?proto.gateway.api.event.v1.OnlineResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setOnlineresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearOnlineresponse = function() {
  return this.setOnlineresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasOnlineresponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BeatHeartResponse beatHeartResponse = 5;
 * @return {?proto.gateway.api.event.v1.BeatHeartResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getBeatheartresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.BeatHeartResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.BeatHeartResponse, 5));
};


/**
 * @param {?proto.gateway.api.event.v1.BeatHeartResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setBeatheartresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearBeatheartresponse = function() {
  return this.setBeatheartresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasBeatheartresponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OfflineResponse offlineResponse = 6;
 * @return {?proto.gateway.api.event.v1.OfflineResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getOfflineresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.OfflineResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OfflineResponse, 6));
};


/**
 * @param {?proto.gateway.api.event.v1.OfflineResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setOfflineresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearOfflineresponse = function() {
  return this.setOfflineresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasOfflineresponse = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional AddFriendResponse addFriendResponse = 7;
 * @return {?proto.gateway.api.event.v1.AddFriendResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getAddfriendresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.AddFriendResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.AddFriendResponse, 7));
};


/**
 * @param {?proto.gateway.api.event.v1.AddFriendResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setAddfriendresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearAddfriendresponse = function() {
  return this.setAddfriendresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasAddfriendresponse = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ConfirmFriendResponse confirmFriendResponse = 8;
 * @return {?proto.gateway.api.event.v1.ConfirmFriendResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getConfirmfriendresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.ConfirmFriendResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.ConfirmFriendResponse, 8));
};


/**
 * @param {?proto.gateway.api.event.v1.ConfirmFriendResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setConfirmfriendresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearConfirmfriendresponse = function() {
  return this.setConfirmfriendresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasConfirmfriendresponse = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NotifyReceiveAddFriendResponse notifyReceiveAddFriendResponse = 9;
 * @return {?proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getNotifyreceiveaddfriendresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse, 9));
};


/**
 * @param {?proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setNotifyreceiveaddfriendresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearNotifyreceiveaddfriendresponse = function() {
  return this.setNotifyreceiveaddfriendresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasNotifyreceiveaddfriendresponse = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ListFriendResponse listFriendResponse = 10;
 * @return {?proto.gateway.api.event.v1.ListFriendResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getListfriendresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.ListFriendResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.ListFriendResponse, 10));
};


/**
 * @param {?proto.gateway.api.event.v1.ListFriendResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setListfriendresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearListfriendresponse = function() {
  return this.setListfriendresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasListfriendresponse = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DeleteFriendResponse deleteFriendResponse = 11;
 * @return {?proto.gateway.api.event.v1.DeleteFriendResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getDeletefriendresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.DeleteFriendResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.DeleteFriendResponse, 11));
};


/**
 * @param {?proto.gateway.api.event.v1.DeleteFriendResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setDeletefriendresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearDeletefriendresponse = function() {
  return this.setDeletefriendresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasDeletefriendresponse = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SingleMessageResponse singleMessageResponse = 12;
 * @return {?proto.gateway.api.event.v1.SingleMessageResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getSinglemessageresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.SingleMessageResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.SingleMessageResponse, 12));
};


/**
 * @param {?proto.gateway.api.event.v1.SingleMessageResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setSinglemessageresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearSinglemessageresponse = function() {
  return this.setSinglemessageresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasSinglemessageresponse = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ListUserInfoResponse listUserInfoResponse = 13;
 * @return {?proto.gateway.api.event.v1.ListUserInfoResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getListuserinforesponse = function() {
  return /** @type{?proto.gateway.api.event.v1.ListUserInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.ListUserInfoResponse, 13));
};


/**
 * @param {?proto.gateway.api.event.v1.ListUserInfoResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setListuserinforesponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearListuserinforesponse = function() {
  return this.setListuserinforesponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasListuserinforesponse = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OnlineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OnlineRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OnlineRequest}
 */
proto.gateway.api.event.v1.OnlineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OnlineRequest;
  return proto.gateway.api.event.v1.OnlineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OnlineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OnlineRequest}
 */
proto.gateway.api.event.v1.OnlineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OnlineRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OnlineRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OnlineRequest} returns this
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.BeatHeartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.BeatHeartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.BeatHeartRequest}
 */
proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.BeatHeartRequest;
  return proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.BeatHeartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.BeatHeartRequest}
 */
proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.BeatHeartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.BeatHeartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.BeatHeartRequest} returns this
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OfflineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OfflineRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OfflineRequest}
 */
proto.gateway.api.event.v1.OfflineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OfflineRequest;
  return proto.gateway.api.event.v1.OfflineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OfflineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OfflineRequest}
 */
proto.gateway.api.event.v1.OfflineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OfflineRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OfflineRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OfflineRequest} returns this
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sessionId = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OfflineRequest} returns this
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.AddFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.AddFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.AddFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiveruuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventuuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sendtime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.AddFriendRequest}
 */
proto.gateway.api.event.v1.AddFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.AddFriendRequest;
  return proto.gateway.api.event.v1.AddFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.AddFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.AddFriendRequest}
 */
proto.gateway.api.event.v1.AddFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveruuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventuuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.AddFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.AddFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.AddFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiveruuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventuuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSendtime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string receiverUuid = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.getReceiveruuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.AddFriendRequest} returns this
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.setReceiveruuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.AddFriendRequest} returns this
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string eventUuid = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.getEventuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.AddFriendRequest} returns this
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.setEventuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 sendTime = 4;
 * @return {number}
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.getSendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.AddFriendRequest} returns this
 */
proto.gateway.api.event.v1.AddFriendRequest.prototype.setSendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.ConfirmFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.ConfirmFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    addstatcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sendtime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.ConfirmFriendRequest}
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.ConfirmFriendRequest;
  return proto.gateway.api.event.v1.ConfirmFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.ConfirmFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.ConfirmFriendRequest}
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gateway.api.event.v1.AddStatCode} */ (reader.readEnum());
      msg.setAddstatcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventuuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.ConfirmFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.ConfirmFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddstatcode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEventuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendtime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional AddStatCode addStatCode = 1;
 * @return {!proto.gateway.api.event.v1.AddStatCode}
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.getAddstatcode = function() {
  return /** @type {!proto.gateway.api.event.v1.AddStatCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gateway.api.event.v1.AddStatCode} value
 * @return {!proto.gateway.api.event.v1.ConfirmFriendRequest} returns this
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.setAddstatcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string eventUuid = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.getEventuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.ConfirmFriendRequest} returns this
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.setEventuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 sendTime = 3;
 * @return {number}
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.getSendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.ConfirmFriendRequest} returns this
 */
proto.gateway.api.event.v1.ConfirmFriendRequest.prototype.setSendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest;
  return proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 eventId = 1;
 * @return {number}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.prototype.getEventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest} returns this
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendRequest.prototype.setEventid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.ListFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.ListFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.ListFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.ListFriendRequest}
 */
proto.gateway.api.event.v1.ListFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.ListFriendRequest;
  return proto.gateway.api.event.v1.ListFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.ListFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.ListFriendRequest}
 */
proto.gateway.api.event.v1.ListFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.ListFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.ListFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.ListFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.ListFriendRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.ListFriendRequest} returns this
 */
proto.gateway.api.event.v1.ListFriendRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.DeleteFriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.DeleteFriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.DeleteFriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sendtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    removeuuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.DeleteFriendRequest}
 */
proto.gateway.api.event.v1.DeleteFriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.DeleteFriendRequest;
  return proto.gateway.api.event.v1.DeleteFriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.DeleteFriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.DeleteFriendRequest}
 */
proto.gateway.api.event.v1.DeleteFriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventuuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoveuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.DeleteFriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.DeleteFriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.DeleteFriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendtime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRemoveuuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string eventUuid = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.getEventuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.DeleteFriendRequest} returns this
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.setEventuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 sendTime = 2;
 * @return {number}
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.getSendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.DeleteFriendRequest} returns this
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.setSendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string removeUuid = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.getRemoveuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.DeleteFriendRequest} returns this
 */
proto.gateway.api.event.v1.DeleteFriendRequest.prototype.setRemoveuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.api.event.v1.SingleMessageRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.SingleMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.SingleMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.SingleMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagechainList: jspb.Message.toObjectList(msg.getMessagechainList(),
    proto.gateway.api.event.v1.Message.toObject, includeInstance),
    messageuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    receiveruuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sendtime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.SingleMessageRequest}
 */
proto.gateway.api.event.v1.SingleMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.SingleMessageRequest;
  return proto.gateway.api.event.v1.SingleMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.SingleMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.SingleMessageRequest}
 */
proto.gateway.api.event.v1.SingleMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gateway.api.event.v1.Message;
      reader.readMessage(value,proto.gateway.api.event.v1.Message.deserializeBinaryFromReader);
      msg.addMessagechain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageuuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveruuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.SingleMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.SingleMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.SingleMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagechainList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gateway.api.event.v1.Message.serializeBinaryToWriter
    );
  }
  f = message.getMessageuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReceiveruuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSendtime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated Message messageChain = 1;
 * @return {!Array<!proto.gateway.api.event.v1.Message>}
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.getMessagechainList = function() {
  return /** @type{!Array<!proto.gateway.api.event.v1.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.api.event.v1.Message, 1));
};


/**
 * @param {!Array<!proto.gateway.api.event.v1.Message>} value
 * @return {!proto.gateway.api.event.v1.SingleMessageRequest} returns this
*/
proto.gateway.api.event.v1.SingleMessageRequest.prototype.setMessagechainList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gateway.api.event.v1.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.api.event.v1.Message}
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.addMessagechain = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gateway.api.event.v1.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.api.event.v1.SingleMessageRequest} returns this
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.clearMessagechainList = function() {
  return this.setMessagechainList([]);
};


/**
 * optional string messageUuid = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.getMessageuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.SingleMessageRequest} returns this
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.setMessageuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string receiverUuid = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.getReceiveruuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.SingleMessageRequest} returns this
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.setReceiveruuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 sendTime = 4;
 * @return {number}
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.getSendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.SingleMessageRequest} returns this
 */
proto.gateway.api.event.v1.SingleMessageRequest.prototype.setSendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.api.event.v1.ListUserInfoRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.ListUserInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.ListUserInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.ListUserInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListUserInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuidList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.ListUserInfoRequest}
 */
proto.gateway.api.event.v1.ListUserInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.ListUserInfoRequest;
  return proto.gateway.api.event.v1.ListUserInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.ListUserInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.ListUserInfoRequest}
 */
proto.gateway.api.event.v1.ListUserInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.ListUserInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.ListUserInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.ListUserInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListUserInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuidList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string uuid = 1;
 * @return {!Array<string>}
 */
proto.gateway.api.event.v1.ListUserInfoRequest.prototype.getUuidList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.api.event.v1.ListUserInfoRequest} returns this
 */
proto.gateway.api.event.v1.ListUserInfoRequest.prototype.setUuidList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.api.event.v1.ListUserInfoRequest} returns this
 */
proto.gateway.api.event.v1.ListUserInfoRequest.prototype.addUuid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.api.event.v1.ListUserInfoRequest} returns this
 */
proto.gateway.api.event.v1.ListUserInfoRequest.prototype.clearUuidList = function() {
  return this.setUuidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OnlineResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OnlineResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OnlineResponse}
 */
proto.gateway.api.event.v1.OnlineResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OnlineResponse;
  return proto.gateway.api.event.v1.OnlineResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OnlineResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OnlineResponse}
 */
proto.gateway.api.event.v1.OnlineResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OnlineResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OnlineResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OnlineResponse} returns this
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.BeatHeartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse}
 */
proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.BeatHeartResponse;
  return proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse}
 */
proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gateway.api.event.v1.BeatHeartResponse.Flag} */ (reader.readEnum());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.BeatHeartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlag();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.gateway.api.event.v1.BeatHeartResponse.Flag = {
  ACK: 0,
  FIN: 1,
  RST: 2
};

/**
 * optional Flag flag = 1;
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse.Flag}
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.getFlag = function() {
  return /** @type {!proto.gateway.api.event.v1.BeatHeartResponse.Flag} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse.Flag} value
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse} returns this
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.setFlag = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OfflineResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OfflineResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OfflineResponse}
 */
proto.gateway.api.event.v1.OfflineResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OfflineResponse;
  return proto.gateway.api.event.v1.OfflineResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OfflineResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OfflineResponse}
 */
proto.gateway.api.event.v1.OfflineResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OfflineResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OfflineResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OfflineResponse} returns this
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.SingleMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.SingleMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.SingleMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.SingleMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messageuuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.SingleMessageResponse}
 */
proto.gateway.api.event.v1.SingleMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.SingleMessageResponse;
  return proto.gateway.api.event.v1.SingleMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.SingleMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.SingleMessageResponse}
 */
proto.gateway.api.event.v1.SingleMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.SingleMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.SingleMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.SingleMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.SingleMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMessageuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 messageId = 1;
 * @return {number}
 */
proto.gateway.api.event.v1.SingleMessageResponse.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.SingleMessageResponse} returns this
 */
proto.gateway.api.event.v1.SingleMessageResponse.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string messageUuid = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.SingleMessageResponse.prototype.getMessageuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.SingleMessageResponse} returns this
 */
proto.gateway.api.event.v1.SingleMessageResponse.prototype.setMessageuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.AddFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.AddFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.AddFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.AddFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.AddFriendResponse}
 */
proto.gateway.api.event.v1.AddFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.AddFriendResponse;
  return proto.gateway.api.event.v1.AddFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.AddFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.AddFriendResponse}
 */
proto.gateway.api.event.v1.AddFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventuuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.AddFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.AddFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.AddFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.AddFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string eventUuid = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.AddFriendResponse.prototype.getEventuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.AddFriendResponse} returns this
 */
proto.gateway.api.event.v1.AddFriendResponse.prototype.setEventuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 eventId = 2;
 * @return {number}
 */
proto.gateway.api.event.v1.AddFriendResponse.prototype.getEventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.AddFriendResponse} returns this
 */
proto.gateway.api.event.v1.AddFriendResponse.prototype.setEventid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.ConfirmFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.ConfirmFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventuuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.ConfirmFriendResponse}
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.ConfirmFriendResponse;
  return proto.gateway.api.event.v1.ConfirmFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.ConfirmFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.ConfirmFriendResponse}
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.ConfirmFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.ConfirmFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEventuuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 eventId = 1;
 * @return {number}
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.prototype.getEventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.ConfirmFriendResponse} returns this
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.prototype.setEventid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string eventUuid = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.prototype.getEventuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.ConfirmFriendResponse} returns this
 */
proto.gateway.api.event.v1.ConfirmFriendResponse.prototype.setEventuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    note: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse;
  return proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestuuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRequestuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 eventId = 1;
 * @return {number}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.getEventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse} returns this
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.setEventid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string requestUuid = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.getRequestuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse} returns this
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.setRequestuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string note = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse} returns this
 */
proto.gateway.api.event.v1.NotifyReceiveAddFriendResponse.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.api.event.v1.ListFriendResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.ListFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.ListFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.ListFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    frienduuidList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.ListFriendResponse}
 */
proto.gateway.api.event.v1.ListFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.ListFriendResponse;
  return proto.gateway.api.event.v1.ListFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.ListFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.ListFriendResponse}
 */
proto.gateway.api.event.v1.ListFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFrienduuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.ListFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.ListFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.ListFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrienduuidList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string friendUuid = 1;
 * @return {!Array<string>}
 */
proto.gateway.api.event.v1.ListFriendResponse.prototype.getFrienduuidList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.api.event.v1.ListFriendResponse} returns this
 */
proto.gateway.api.event.v1.ListFriendResponse.prototype.setFrienduuidList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.api.event.v1.ListFriendResponse} returns this
 */
proto.gateway.api.event.v1.ListFriendResponse.prototype.addFrienduuid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.api.event.v1.ListFriendResponse} returns this
 */
proto.gateway.api.event.v1.ListFriendResponse.prototype.clearFrienduuidList = function() {
  return this.setFrienduuidList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.DeleteFriendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.DeleteFriendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.DeleteFriendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.DeleteFriendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.DeleteFriendResponse}
 */
proto.gateway.api.event.v1.DeleteFriendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.DeleteFriendResponse;
  return proto.gateway.api.event.v1.DeleteFriendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.DeleteFriendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.DeleteFriendResponse}
 */
proto.gateway.api.event.v1.DeleteFriendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventuuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.DeleteFriendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.DeleteFriendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.DeleteFriendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.DeleteFriendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string eventUuid = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.DeleteFriendResponse.prototype.getEventuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.DeleteFriendResponse} returns this
 */
proto.gateway.api.event.v1.DeleteFriendResponse.prototype.setEventuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 eventId = 2;
 * @return {number}
 */
proto.gateway.api.event.v1.DeleteFriendResponse.prototype.getEventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.api.event.v1.DeleteFriendResponse} returns this
 */
proto.gateway.api.event.v1.DeleteFriendResponse.prototype.setEventid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.api.event.v1.ListUserInfoResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.ListUserInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.ListUserInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListUserInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userinfoList: jspb.Message.toObjectList(msg.getUserinfoList(),
    proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.ListUserInfoResponse;
  return proto.gateway.api.event.v1.ListUserInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.ListUserInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo;
      reader.readMessage(value,proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.deserializeBinaryFromReader);
      msg.addUserinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.ListUserInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.ListUserInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListUserInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo;
  return proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo} returns this
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string avatar = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo} returns this
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo} returns this
 */
proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated UserInfo userinfo = 1;
 * @return {!Array<!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo>}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.prototype.getUserinfoList = function() {
  return /** @type{!Array<!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo, 1));
};


/**
 * @param {!Array<!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo>} value
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse} returns this
*/
proto.gateway.api.event.v1.ListUserInfoResponse.prototype.setUserinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo}
 */
proto.gateway.api.event.v1.ListUserInfoResponse.prototype.addUserinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gateway.api.event.v1.ListUserInfoResponse.UserInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.api.event.v1.ListUserInfoResponse} returns this
 */
proto.gateway.api.event.v1.ListUserInfoResponse.prototype.clearUserinfoList = function() {
  return this.setUserinfoList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gateway.api.event.v1.Message.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.gateway.api.event.v1.Message.DetailCase = {
  DETAIL_NOT_SET: 0,
  PLAIN: 1,
  IMAGE: 2,
  EMOJI: 3
};

/**
 * @return {proto.gateway.api.event.v1.Message.DetailCase}
 */
proto.gateway.api.event.v1.Message.prototype.getDetailCase = function() {
  return /** @type {proto.gateway.api.event.v1.Message.DetailCase} */(jspb.Message.computeOneofCase(this, proto.gateway.api.event.v1.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    plain: (f = msg.getPlain()) && proto.gateway.api.event.v1.Message.Plain.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.gateway.api.event.v1.Message.Image.toObject(includeInstance, f),
    emoji: (f = msg.getEmoji()) && proto.gateway.api.event.v1.Message.Emoji.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.Message}
 */
proto.gateway.api.event.v1.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.Message;
  return proto.gateway.api.event.v1.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.Message}
 */
proto.gateway.api.event.v1.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gateway.api.event.v1.Message.Plain;
      reader.readMessage(value,proto.gateway.api.event.v1.Message.Plain.deserializeBinaryFromReader);
      msg.setPlain(value);
      break;
    case 2:
      var value = new proto.gateway.api.event.v1.Message.Image;
      reader.readMessage(value,proto.gateway.api.event.v1.Message.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 3:
      var value = new proto.gateway.api.event.v1.Message.Emoji;
      reader.readMessage(value,proto.gateway.api.event.v1.Message.Emoji.deserializeBinaryFromReader);
      msg.setEmoji(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gateway.api.event.v1.Message.Plain.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gateway.api.event.v1.Message.Image.serializeBinaryToWriter
    );
  }
  f = message.getEmoji();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gateway.api.event.v1.Message.Emoji.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.Message.Plain.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.Message.Plain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.Message.Plain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.Plain.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.Message.Plain}
 */
proto.gateway.api.event.v1.Message.Plain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.Message.Plain;
  return proto.gateway.api.event.v1.Message.Plain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.Message.Plain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.Message.Plain}
 */
proto.gateway.api.event.v1.Message.Plain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.Message.Plain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.Message.Plain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.Message.Plain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.Plain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.Message.Plain.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.Message.Plain} returns this
 */
proto.gateway.api.event.v1.Message.Plain.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.Message.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.Message.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.Message.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.Message.Image}
 */
proto.gateway.api.event.v1.Message.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.Message.Image;
  return proto.gateway.api.event.v1.Message.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.Message.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.Message.Image}
 */
proto.gateway.api.event.v1.Message.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.Message.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.Message.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.Message.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.Message.Image.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.Message.Image} returns this
 */
proto.gateway.api.event.v1.Message.Image.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.Message.Emoji.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.Message.Emoji.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.Message.Emoji} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.Emoji.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.Message.Emoji}
 */
proto.gateway.api.event.v1.Message.Emoji.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.Message.Emoji;
  return proto.gateway.api.event.v1.Message.Emoji.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.Message.Emoji} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.Message.Emoji}
 */
proto.gateway.api.event.v1.Message.Emoji.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.Message.Emoji.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.Message.Emoji.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.Message.Emoji} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.Message.Emoji.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.Message.Emoji.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.Message.Emoji} returns this
 */
proto.gateway.api.event.v1.Message.Emoji.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Plain plain = 1;
 * @return {?proto.gateway.api.event.v1.Message.Plain}
 */
proto.gateway.api.event.v1.Message.prototype.getPlain = function() {
  return /** @type{?proto.gateway.api.event.v1.Message.Plain} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.Message.Plain, 1));
};


/**
 * @param {?proto.gateway.api.event.v1.Message.Plain|undefined} value
 * @return {!proto.gateway.api.event.v1.Message} returns this
*/
proto.gateway.api.event.v1.Message.prototype.setPlain = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.gateway.api.event.v1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.Message} returns this
 */
proto.gateway.api.event.v1.Message.prototype.clearPlain = function() {
  return this.setPlain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.Message.prototype.hasPlain = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Image image = 2;
 * @return {?proto.gateway.api.event.v1.Message.Image}
 */
proto.gateway.api.event.v1.Message.prototype.getImage = function() {
  return /** @type{?proto.gateway.api.event.v1.Message.Image} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.Message.Image, 2));
};


/**
 * @param {?proto.gateway.api.event.v1.Message.Image|undefined} value
 * @return {!proto.gateway.api.event.v1.Message} returns this
*/
proto.gateway.api.event.v1.Message.prototype.setImage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.gateway.api.event.v1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.Message} returns this
 */
proto.gateway.api.event.v1.Message.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.Message.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Emoji emoji = 3;
 * @return {?proto.gateway.api.event.v1.Message.Emoji}
 */
proto.gateway.api.event.v1.Message.prototype.getEmoji = function() {
  return /** @type{?proto.gateway.api.event.v1.Message.Emoji} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.Message.Emoji, 3));
};


/**
 * @param {?proto.gateway.api.event.v1.Message.Emoji|undefined} value
 * @return {!proto.gateway.api.event.v1.Message} returns this
*/
proto.gateway.api.event.v1.Message.prototype.setEmoji = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.gateway.api.event.v1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.Message} returns this
 */
proto.gateway.api.event.v1.Message.prototype.clearEmoji = function() {
  return this.setEmoji(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.Message.prototype.hasEmoji = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.gateway.api.event.v1.Code = {
  OK: 0,
  CANCELLED: 1,
  UNKNOWN: 2,
  INVALID_ARGUMENT: 3,
  DEADLINE_EXCEEDED: 4,
  NOT_FOUND: 5,
  ALREADY_EXISTS: 6,
  PERMISSION_DENIED: 7,
  RESOURCE_EXHAUSTED: 8,
  FAILED_PRECONDITION: 9,
  ABORTED: 10,
  OUT_OF_RANGE: 11,
  UNIMPLEMENTED: 12,
  INTERNAL: 13,
  UNAVAILABLE: 14,
  DATA_LOSS: 15,
  UNAUTHENTICATED: 16
};

/**
 * @enum {number}
 */
proto.gateway.api.event.v1.AddStatCode = {
  WAITING: 0,
  SUCCESS: 1,
  DENIED: 2
};

goog.object.extend(exports, proto.gateway.api.event.v1);
