// source: event_stream.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.gateway.api.event.v1.BeatHeartRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.BeatHeartResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.BeatHeartResponse.Flag', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.Code', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamRequest.EventCase', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.EventStreamResponse.EventCase', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OfflineRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OfflineResponse', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OnlineRequest', null, global);
goog.exportSymbol('proto.gateway.api.event.v1.OnlineResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.EventStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_);
};
goog.inherits(proto.gateway.api.event.v1.EventStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.EventStreamRequest.displayName = 'proto.gateway.api.event.v1.EventStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.EventStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_);
};
goog.inherits(proto.gateway.api.event.v1.EventStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.EventStreamResponse.displayName = 'proto.gateway.api.event.v1.EventStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OnlineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OnlineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OnlineRequest.displayName = 'proto.gateway.api.event.v1.OnlineRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.BeatHeartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.BeatHeartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.BeatHeartRequest.displayName = 'proto.gateway.api.event.v1.BeatHeartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OfflineRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OfflineRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OfflineRequest.displayName = 'proto.gateway.api.event.v1.OfflineRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OnlineResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OnlineResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OnlineResponse.displayName = 'proto.gateway.api.event.v1.OnlineResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.BeatHeartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.BeatHeartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.BeatHeartResponse.displayName = 'proto.gateway.api.event.v1.BeatHeartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.api.event.v1.OfflineResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.api.event.v1.OfflineResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.api.event.v1.OfflineResponse.displayName = 'proto.gateway.api.event.v1.OfflineResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.gateway.api.event.v1.EventStreamRequest.EventCase = {
  EVENT_NOT_SET: 0,
  ONLINEREQUEST: 2,
  BEATHEARTREQUEST: 3,
  OFFLINEREQUEST: 4
};

/**
 * @return {proto.gateway.api.event.v1.EventStreamRequest.EventCase}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getEventCase = function() {
  return /** @type {proto.gateway.api.event.v1.EventStreamRequest.EventCase} */(jspb.Message.computeOneofCase(this, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.EventStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.EventStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    onlinerequest: (f = msg.getOnlinerequest()) && proto.gateway.api.event.v1.OnlineRequest.toObject(includeInstance, f),
    beatheartrequest: (f = msg.getBeatheartrequest()) && proto.gateway.api.event.v1.BeatHeartRequest.toObject(includeInstance, f),
    offlinerequest: (f = msg.getOfflinerequest()) && proto.gateway.api.event.v1.OfflineRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.EventStreamRequest;
  return proto.gateway.api.event.v1.EventStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.EventStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.gateway.api.event.v1.OnlineRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.OnlineRequest.deserializeBinaryFromReader);
      msg.setOnlinerequest(value);
      break;
    case 3:
      var value = new proto.gateway.api.event.v1.BeatHeartRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinaryFromReader);
      msg.setBeatheartrequest(value);
      break;
    case 4:
      var value = new proto.gateway.api.event.v1.OfflineRequest;
      reader.readMessage(value,proto.gateway.api.event.v1.OfflineRequest.deserializeBinaryFromReader);
      msg.setOfflinerequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.EventStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.EventStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnlinerequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gateway.api.event.v1.OnlineRequest.serializeBinaryToWriter
    );
  }
  f = message.getBeatheartrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gateway.api.event.v1.BeatHeartRequest.serializeBinaryToWriter
    );
  }
  f = message.getOfflinerequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gateway.api.event.v1.OfflineRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OnlineRequest onlineRequest = 2;
 * @return {?proto.gateway.api.event.v1.OnlineRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getOnlinerequest = function() {
  return /** @type{?proto.gateway.api.event.v1.OnlineRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OnlineRequest, 2));
};


/**
 * @param {?proto.gateway.api.event.v1.OnlineRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setOnlinerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearOnlinerequest = function() {
  return this.setOnlinerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasOnlinerequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BeatHeartRequest beatHeartRequest = 3;
 * @return {?proto.gateway.api.event.v1.BeatHeartRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getBeatheartrequest = function() {
  return /** @type{?proto.gateway.api.event.v1.BeatHeartRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.BeatHeartRequest, 3));
};


/**
 * @param {?proto.gateway.api.event.v1.BeatHeartRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setBeatheartrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearBeatheartrequest = function() {
  return this.setBeatheartrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasBeatheartrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OfflineRequest offlineRequest = 4;
 * @return {?proto.gateway.api.event.v1.OfflineRequest}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.getOfflinerequest = function() {
  return /** @type{?proto.gateway.api.event.v1.OfflineRequest} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OfflineRequest, 4));
};


/**
 * @param {?proto.gateway.api.event.v1.OfflineRequest|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
*/
proto.gateway.api.event.v1.EventStreamRequest.prototype.setOfflinerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.gateway.api.event.v1.EventStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamRequest} returns this
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.clearOfflinerequest = function() {
  return this.setOfflinerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamRequest.prototype.hasOfflinerequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_ = [[4,5,6]];

/**
 * @enum {number}
 */
proto.gateway.api.event.v1.EventStreamResponse.EventCase = {
  EVENT_NOT_SET: 0,
  ONLINERESPONSE: 4,
  BEATHEARTRESPONSE: 5,
  OFFLINERESPONSE: 6
};

/**
 * @return {proto.gateway.api.event.v1.EventStreamResponse.EventCase}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getEventCase = function() {
  return /** @type {proto.gateway.api.event.v1.EventStreamResponse.EventCase} */(jspb.Message.computeOneofCase(this, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.EventStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.EventStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    messages: jspb.Message.getFieldWithDefault(msg, 3, ""),
    onlineresponse: (f = msg.getOnlineresponse()) && proto.gateway.api.event.v1.OnlineResponse.toObject(includeInstance, f),
    beatheartresponse: (f = msg.getBeatheartresponse()) && proto.gateway.api.event.v1.BeatHeartResponse.toObject(includeInstance, f),
    offlineresponse: (f = msg.getOfflineresponse()) && proto.gateway.api.event.v1.OfflineResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.EventStreamResponse;
  return proto.gateway.api.event.v1.EventStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.EventStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {!proto.gateway.api.event.v1.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessages(value);
      break;
    case 4:
      var value = new proto.gateway.api.event.v1.OnlineResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.OnlineResponse.deserializeBinaryFromReader);
      msg.setOnlineresponse(value);
      break;
    case 5:
      var value = new proto.gateway.api.event.v1.BeatHeartResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinaryFromReader);
      msg.setBeatheartresponse(value);
      break;
    case 6:
      var value = new proto.gateway.api.event.v1.OfflineResponse;
      reader.readMessage(value,proto.gateway.api.event.v1.OfflineResponse.deserializeBinaryFromReader);
      msg.setOfflineresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.EventStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.EventStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.EventStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessages();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOnlineresponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gateway.api.event.v1.OnlineResponse.serializeBinaryToWriter
    );
  }
  f = message.getBeatheartresponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gateway.api.event.v1.BeatHeartResponse.serializeBinaryToWriter
    );
  }
  f = message.getOfflineresponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gateway.api.event.v1.OfflineResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Code code = 2;
 * @return {!proto.gateway.api.event.v1.Code}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getCode = function() {
  return /** @type {!proto.gateway.api.event.v1.Code} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gateway.api.event.v1.Code} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string messages = 3;
 * @return {string}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getMessages = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.setMessages = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional OnlineResponse onlineResponse = 4;
 * @return {?proto.gateway.api.event.v1.OnlineResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getOnlineresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.OnlineResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OnlineResponse, 4));
};


/**
 * @param {?proto.gateway.api.event.v1.OnlineResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setOnlineresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearOnlineresponse = function() {
  return this.setOnlineresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasOnlineresponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BeatHeartResponse beatHeartResponse = 5;
 * @return {?proto.gateway.api.event.v1.BeatHeartResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getBeatheartresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.BeatHeartResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.BeatHeartResponse, 5));
};


/**
 * @param {?proto.gateway.api.event.v1.BeatHeartResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setBeatheartresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearBeatheartresponse = function() {
  return this.setBeatheartresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasBeatheartresponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OfflineResponse offlineResponse = 6;
 * @return {?proto.gateway.api.event.v1.OfflineResponse}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.getOfflineresponse = function() {
  return /** @type{?proto.gateway.api.event.v1.OfflineResponse} */ (
    jspb.Message.getWrapperField(this, proto.gateway.api.event.v1.OfflineResponse, 6));
};


/**
 * @param {?proto.gateway.api.event.v1.OfflineResponse|undefined} value
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
*/
proto.gateway.api.event.v1.EventStreamResponse.prototype.setOfflineresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.gateway.api.event.v1.EventStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.api.event.v1.EventStreamResponse} returns this
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.clearOfflineresponse = function() {
  return this.setOfflineresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.api.event.v1.EventStreamResponse.prototype.hasOfflineresponse = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OnlineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OnlineRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OnlineRequest}
 */
proto.gateway.api.event.v1.OnlineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OnlineRequest;
  return proto.gateway.api.event.v1.OnlineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OnlineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OnlineRequest}
 */
proto.gateway.api.event.v1.OnlineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OnlineRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OnlineRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OnlineRequest} returns this
 */
proto.gateway.api.event.v1.OnlineRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.BeatHeartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.BeatHeartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.BeatHeartRequest}
 */
proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.BeatHeartRequest;
  return proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.BeatHeartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.BeatHeartRequest}
 */
proto.gateway.api.event.v1.BeatHeartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.BeatHeartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.BeatHeartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.BeatHeartRequest} returns this
 */
proto.gateway.api.event.v1.BeatHeartRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OfflineRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OfflineRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OfflineRequest}
 */
proto.gateway.api.event.v1.OfflineRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OfflineRequest;
  return proto.gateway.api.event.v1.OfflineRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OfflineRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OfflineRequest}
 */
proto.gateway.api.event.v1.OfflineRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OfflineRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OfflineRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OfflineRequest} returns this
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sessionId = 2;
 * @return {string}
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OfflineRequest} returns this
 */
proto.gateway.api.event.v1.OfflineRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OnlineResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OnlineResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OnlineResponse}
 */
proto.gateway.api.event.v1.OnlineResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OnlineResponse;
  return proto.gateway.api.event.v1.OnlineResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OnlineResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OnlineResponse}
 */
proto.gateway.api.event.v1.OnlineResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OnlineResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OnlineResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OnlineResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sessionId = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OnlineResponse} returns this
 */
proto.gateway.api.event.v1.OnlineResponse.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.BeatHeartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse}
 */
proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.BeatHeartResponse;
  return proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse}
 */
proto.gateway.api.event.v1.BeatHeartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gateway.api.event.v1.BeatHeartResponse.Flag} */ (reader.readEnum());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.BeatHeartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.BeatHeartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlag();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.gateway.api.event.v1.BeatHeartResponse.Flag = {
  ACK: 0,
  FIN: 1,
  RST: 2
};

/**
 * optional Flag flag = 1;
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse.Flag}
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.getFlag = function() {
  return /** @type {!proto.gateway.api.event.v1.BeatHeartResponse.Flag} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gateway.api.event.v1.BeatHeartResponse.Flag} value
 * @return {!proto.gateway.api.event.v1.BeatHeartResponse} returns this
 */
proto.gateway.api.event.v1.BeatHeartResponse.prototype.setFlag = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.api.event.v1.OfflineResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.api.event.v1.OfflineResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.api.event.v1.OfflineResponse}
 */
proto.gateway.api.event.v1.OfflineResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.api.event.v1.OfflineResponse;
  return proto.gateway.api.event.v1.OfflineResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.api.event.v1.OfflineResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.api.event.v1.OfflineResponse}
 */
proto.gateway.api.event.v1.OfflineResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.api.event.v1.OfflineResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.api.event.v1.OfflineResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.api.event.v1.OfflineResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.api.event.v1.OfflineResponse} returns this
 */
proto.gateway.api.event.v1.OfflineResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.gateway.api.event.v1.Code = {
  OK: 0,
  CANCELLED: 1,
  UNKNOWN: 2,
  INVALID_ARGUMENT: 3,
  DEADLINE_EXCEEDED: 4,
  NOT_FOUND: 5,
  ALREADY_EXISTS: 6,
  PERMISSION_DENIED: 7,
  RESOURCE_EXHAUSTED: 8,
  FAILED_PRECONDITION: 9,
  ABORTED: 10,
  OUT_OF_RANGE: 11,
  UNIMPLEMENTED: 12,
  INTERNAL: 13,
  UNAVAILABLE: 14,
  DATA_LOSS: 15,
  UNAUTHENTICATED: 16
};

goog.object.extend(exports, proto.gateway.api.event.v1);
